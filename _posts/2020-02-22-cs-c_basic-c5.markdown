---
layout: post
title:  "C언어 기초5 - 구조체와 그 활용, 파일 입출력"
subtitle:   "C언어-5"
categories: cs
tags: c_basic
comments: true
---

- C언어 상의 구조체와 구조체의 활용, 그리고 파일 입출력에 대한 글입니다.  

---  

# 15. 구조체(Struct)  

- C언어: 자바나 C++ 에 비해 개발이 까다로운 편   
  - 무엇보다, 객체 지향에서의 언어들을 C언어에서 바르게 적용하기가 어렵다.  
  - 구조체: 객체 지향 언어에서의 `Class`와 유사한 개념  
  
- 구조체  
  : 객체 지향 프로그래밍에서 말하는 클래스의 모체가 되는 것으로 여러 개의 자료형을 묶어서 새로운 자료형을 만들 수 있는 방법  
  - 여러 개의 데이터를 하나로 묶어서 사용할 수 있도록 하기 위해 만들어진 C언어의 문법  
  - 구조체의 개념은 객체 지향 언어에서 '클래스'라는 이름으로 확장되어 사용됨  
  
  |배열|구조체|  
  |---|------|  
  |같은 자료형 여러 개를 묶음|서로 다른 자료형 여러 개를 묶음|  
  
  ```  
  // ex
  struct number {
    int img;
    float real;
  };
  ```  
  
  ![](http://drive.google.com/uc?export=view&id=1riWZSZ3JFFgnhj1lGiu48v04mUOMJWzz)  
  
  - Song이라는 이름의 구조체  
  - .Name, .length: 내부적 속성  
    - Name: string, length: double/float 형으로 만들 것 같음.  
   
  ![](http://drive.google.com/uc?export=view&id=1jaeqq4psGvsngalNMx3Uw6EjOciXG9z3)  
  
  - Title1이라는 이름의 Song 구조체의 변수  
  - .Name이라는 변수에 이름을, .length에 길이를  
  
- 학생 구조체를 다루고 출력하는 프로그램  

  ```  
  #include <stdio.h>
  #include <string.h>
  //#include <stdlib.h> 동빈님은 이걸 쓰셨지만, 'strcpy' was not declared in this scope 떠서 string.h 사용함 

  struct student {
    int number;
    char name[10];
    double grade;
  };


  int main(void){
    struct student s; // 구조체 student의 변수로 s를.   
    s.number = 20150001;
    strcpy(s.name, "홍길동");
    s.grade = 4.5;
    printf("학번: %d\n", s.number);
    printf("이름: %s\n", s.name);
    printf("학점: %.1f\n", s.grade);
    return 0;
  }
  ```  
  
- 학생 정보 구조체 활용  

  ```  
  #include <stdio.h>
  #include <string.h>
  //#include <stdlib.h> 동빈님은 이걸 쓰셨지만, 'strcpy' was not declared in this scope 떠서 string.h 사용함 

  struct student {
    int number;
    char name[10];
    double grade;
  };


  int main(void){
    struct student s; // 구조체 student의 변수로 s를.   

    printf("학번을 입력하세요: ");
    scanf("%d", &s.number);
    printf("이름을 입력하세요: ");
    scanf("%s", s.name); // 배열은 그 자체로 포인터의  의미를 갖고 있기에, 따로 & 넣을 필요 없음 
    printf("학점을 입력하세요: ");
    scanf("%lf", &s.grade);

    printf("학번: %d\n", s.number);
    printf("이름: %s\n", s.name);
    printf("학점: %.1f\n", s.grade);
    return 0;
  }
  ```  
  
  - `%lf`: double형 같은 경우에는 입력받을 때 %lf라고 해주어야 함.  
    - cf) float형: `%f`  
    
- 두 점 사이의 거리 구하기  
  
  ```  
  #include <stdio.h>
  #include <math.h>

  struct point {
    int x;
    int y;

  };

  int main(void){

    struct point p1, p2;
    int xDiff, yDiff;
    double distance;

    printf("1번 점의 좌표를 입력하세요: "); 
    scanf("%d %d", &p1.x, &p1.y);
    printf("2번 점의 좌표를 입력하세요: ");
    scanf("%d %d", &p2.x, &p2.y);

    xDiff = p1.x - p2.x;
    yDiff = p1.y - p2.y;

    distance = sqrt(xDiff * xDiff + yDiff * yDiff);
    printf("두 점 사이의 거리는 %f입니다.", distance);

    return 0;
  } 
  ```  
  
# 16. 구조체의 활용1  
  
- 학생 정보 시스템  
  
  ```  
  * 학생 
    └ 학번
    └ 이름
    └ 학점
  ```  
  
  - 실제로 이런 식으로 구현이 가능  
  
    ```  
    struct Student
    {
      int number;
      char name[10];
      double GPA;
    };
    ```  
    
- 프로그램의 크기가 커질수록 C언어 상에서 구조체의 활용이 불가피  
  - 적절하게 구조체를 활용하는 능력 필수불가결!  
  
- 구조체 = `설계`!!  

- 구조체를 이용해서 사각형의 넓이와 둘레 계산  

  ```  
  #include <stdio.h>
  #include <math.h>

  struct point{
    int x;
    int y;
  }; 

  struct rect{
    struct point p1; // 왼쪽 최상단 
    struct point p2; // 오른쪽 최하단   
  };

  int main(void){
    struct rect r;
    int w, h, area, peri;

    printf("왼쪽 상단의 좌표를 입력하세요: ");
    scanf("%d %d", &r.p1.x, &r.p1.y);
    printf("오른쪽 하단의 좌표를 입력하세요: ");
    scanf("%d %d", &r.p2.x, &r.p2.y);

    w = abs(r.p2.x - r.p1.x);
    h = abs(r.p2.y - r.p1.y);

    area = w * h;
    peri = 2 * (w + h);

    printf("사각형의 넓이는 %d이고, 둘레는 %d입니다.", area, peri);	
    return 0;
  }

  ```  
  

# 17. 구조체의 활용2  

- 구조체의 비교  

  ```  
  #include <stdio.h>

  struct point {
    int x;
    int y;
  };

  int main(void){
    struct point p1;
    struct point p2;

    p1.x = 30;
    p1.y = 10;

    p2.x = 30;
    p2.y = 10;

    if (p1 == p2){
      printf("p1과 p2가 같습니다.");
    }

    return 0;
  }
  ```  
  
  - 오류가 뜬다  
  
    > 구조체는 아무리 같은 구조체 타입이라고 하더라도 두 개의 변수 자체를 직접 비교하는 것은 불가.  
    
  - 다음과 같이 작성해야 함!  
    
    ```  
    #include <stdio.h>

    struct point {
      int x;
      int y;
    };

    int main(void){
      struct point p1;
      struct point p2;

      p1.x = 30;
      p1.y = 10;

      p2.x = 30;
      p2.y = 10;

      if ((p1.x == p2.x) && (p1.y == p2.y)){ // difference
        printf("p1과 p2가 같습니다.");
      }

      return 0;
    }

    ```  

    - 오류 안뜨고 `p1과 p2가 같습니다.` 라는 결과가 나옴  
    - 구조체 자체의 비교는 불가능하고, 구조체 별로 특징을 따로 비교해주어야 한다.  
    
  ```  
  #include <stdio.h>

  struct point {
    int x;
    int y;
  };

  void comparePoint (struct point p1, struct point p2) {
    if ((p1.x == p2.x) && (p1.y == p2.y))
    {
      printf("p1과 p2가 같습니다.");
    }
  } 


  int main(void){
    struct point p1;
    struct point p2;

    p1.x = 30;
    p1.y = 10;

    p2.x = 30;
    p2.y = 10;

    comparePoint(p1, p2);
  //	if ((p1.x == p2.x) && (p1.y == p2.y))
  //	{
  //		printf("p1과 p2가 같습니다.");
  //	}

    return 0;
  }
  ```  
  - 이런 식으로 훨씬 더 체계적인 구조를 만들 수도 있다!!  
  
- 구조체의 배열  
  
  ```  
  #include <stdio.h>
  #define SIZE 5

  // 총 5명의 학생이라고 해보자.  

  struct student {
    int number;
    char name[20]; // 총 10개의 한글이 들어갈 수 있을 것   
    double grade;
  };

  // 아래 메인 함수의 iteration이 끝나면, 5명의 정보가 RAM 상에 (일시적으로) 저장되어 있을 것  
  int main(void){
    struct student list[SIZE]; 
    int i;

    for(i=0; i<SIZE; i++)
    {
      printf("학번을 입력하세요: ");
      scanf("%d", &list[i].number);
      printf("이름을 입력하세요: ");
      scanf("%s", list[i].name);
      printf("학점을 입력하세요: ");
      scanf("%lf", &list[i].grade);
    }

    for(i=0; i < SIZE; i++)
    {
      printf("학번: %d, 이름: %s, 학점: %.1f\n", list[i].number, list[i].name, list[i].grade);
    }

    return 0;
  }
  ```   
  
# 18. 파일 입출력  
- 지금까지는 printf, scanf를 이용해서 사용자가 컴퓨터와 상호작용  

- 파일 입출력: 말그대로 '파일'을 이용해서 컴퓨터와 상호작용  

  - Create, Open, Read, Rename, Delete, Write, Close 등의 다양한 기능 제공  
  
  ```  
  #include <stdio.h>

  int main(void){

    FILE *fp = NULL;
    fp = fopen("output.txt", "w"); // 쓰기모드 cf) r: 읽기모드 

    if (fp == NULL) // 해당 파일을 열지 못했다면  
    {
      printf("파일 열기에 실패하였습니다.");
    }
    else
    {
      printf("파일 열기에 성공하였습니다.");
    }

    // 한글자 한글자씩 출력하도록  
    fputc('H', fp);
    fputc('E', fp);
    fputc('L', fp);
    fputc('L', fp);
    fputc('O', fp);
    fclose(fp); // 프로그램 종료  

    return 0;
  } 
  ```  
  
- 텍스트 파일 읽기  

  ```  
  #include <stdio.h>

  int main(void){

    FILE *fp = NULL;
    int c;

    fp = fopen("input.txt", "r");

    if (fp == NULL)
    {
      printf("파일 읽기에 실패했습니다.\n");
    }
    else
    {
      printf("파일 읽기에 성공하였습니다.\n");
    }

    // 지금 열려있는 파일이 끝날 때까지, 각각의 문자열을 하나씩 출력! 
    while((c = fgetc(fp)) != EOF) // EOF: EndOfFile (파일의 끝)
    {
      putchar(c);
    }

    fclose(fp);
    return 0;

  } 
  ```  
  
- 텍스트 파일에서 단어 검색하기  

  ```  
  #include <stdio.h>
  #include <string.h>

  int main(void){

    FILE *fp;
    char fname[256];
    char buffer[256];
    char word[256];
    int line = 0;

    printf("파일 이름을 입력하세요: ");
    scanf("%s", fname);

    printf("탐색할 단어를 입력하세요: ");
    scanf("%s", word);

    if ((fp = fopen(fname, "r")) == NULL)
    {
      fprintf(stderr, "파일 %s를 열 수 없습니다.\n", fname);
      return 0;
    }

    while(fgets(buffer, 256, fp)) // fp에서 읽어서 256의 길이만큼 buffer에 담을 수 있다면 
    {
      line++;
      if(strstr(buffer, word)) // word가 buffer에 포함이 되어있는지 여부 
      {
            printf("라인 %d: 단어 %s이(가) 발견되었습니다.\n", line, word);
      }
    }

    fclose(fp);
    return 0;

  }
  ```  
  
  - fprintf: 파일과 관련한 에러를 출력할 때 사용  
  
---  

#### Reference  
- 나동빈님 C언어 기초 프로그래밍  
