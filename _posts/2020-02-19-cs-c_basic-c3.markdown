---
layout: post
title:  "C언어 기초3 - 입출력, 사용자 정의 함수, 반복함수과 재귀함수"
subtitle:   "C언어-3"
categories: cs
tags: c_basic
comments: true
---  

- C언어 상의 기본 입출력과 사용자 정의 함수, 반복함수 및 재귀함수에 대한 글입니다.  

---  

# 8. 기본 입출력 (Input Output)  
- 기본 입출력: 사용자와의 상호작용 그 자체  
  - C언어에서는 기본 입출력 함수를 이용하여 사용자와 상호작용할 수 있다.  
  - ex) scanf("%d", &x);: x라는 정수에 사용자가 입력받은 값을 삽입  
      - &: 특정 변수의 메모리 주소를 의미  
    - 다만, 사용자로부터 입력 받을 자료형에 따라 %d, %c, %f, %lf 등의 다양한 문법을 사용해야  
  - ex) printf();: 사용자에게 메시지를 출력할 때 대표적으로 사용 (텍스트 기반의 입출력)  
    - 물론 GUI를 배우면 글자 뿐만 아니라 사용자에게 이미지도 보여줄 수 있음.  
    
  
- To-do List  
  
  ```  
  - 간단한 계산기 프로그램 개발  
  - 정해진 개수의 정수를 더하는 프로그램 개발  
  - 특정한 단의 구구단을 출력하는 프로그램 개발  
  ```  
  
- 간단한 계산기 프로그램 개발  

  ```  
  #include <stdio.h>

  int main(void){
    char o;
    int x, y;
    while(1){
      printf("수식을 입력하세요: ");
      scanf("%d %c %d", &x, &o, &y);
      if(o == '+'){
        printf("%d %c %d = %d\n", x, o, y, x+y);
      }
      else if(o == '-'){
        printf("%d %c %d = %d\n", x, o, y, x-y);
      }
      else if(o == '*'){
        printf("%d %c %d = %d\n", x, o, y, x*y);
      }
      else if(o == '/'){
        printf("%d %c %d = %d\n", x, o, y, x/y);
      }
      else if(o == '%'){
        printf("%d %c %d = %d\n", x, o, y, x%y);
      }
      else{
        printf("입력이 잘못 되었습니다.\n");
      }
      /* getchar(); */
      printf("프로그램을 종료하시겠습니까? (y/n)");
      scanf("%c", &o);
      if(o == 'n' || o == 'N'){
        continue;
      }
      else if(o == 'y' || o == 'Y'){
        break;
      }
      else{
        printf("입력이 잘못 되었습니다.\n");
      }
    }
    return 0;
  }
  ```  
  
  >> 결과  
    - 이 코드를 그대로 실행하면, 이런 결과가 나옴  

      수식을 입력하세요: 3 + 5
      3 + 5 = 8
      프로그램을 종료하시겠습니까? <y/n> 입력이 잘못되었습니다.  ← 아직 입력을 해주지도 않았는데???  
      수식을 입력하세요:
      

  - 이것은, C언어에서 버퍼를 처리해주지 않았기 때문  
    - 3 + 5를 입력한 후 `enter`를 쳤는데, 이 또한 문자로 인식해버리기 때문에 이런 결과가 나온 것   
  
  - `getchar()` 이용!! 
    - getchar()를 사용해주면 줄바꿈을 효율적으로 처리할 수 있게 됨  
    - cf) [버퍼와 getchar에 대한 좋은 설명](https://modoocode.com/32)  
  
- 정해진 개수의 정수를 더하는 프로그램 개발  
  
  ```  
  #include <stdio.h>

  int main(void){
    int number, x, i, sum = 0;
    printf("정수의 개수를 입력하세요: ");
    scanf("%d", &number);
    for(i=0; i<number; i++){
      printf("정수의 값을 입력하세요: ");
      scanf("%d", &x);
      sum += x;
    }
    printf("선택 정수의 값은 %d입니다.\n", sum);
    return 0;
  } 
  ```  
  
- 특정한 단의 구구단을 출력하는 프로그램 개발  
  
  ```  
    #include <stdio.h>

  int main(void){
    int x, i;
    printf("정수를 입력하세요:");
    scanf("%d", &x);

    for(i=1;i<=9;i++){
      printf("%d * %d = %d\n", x, i, x*i);
    }
    return 0;
  } 
  ```  
  
- Tip  
  
  ```  
  - 가끔 버퍼가 프로그램의 동작을 방해. C언어에서는 간단하게 getchar() 함수로 버퍼의 공백 문자를 받아낼 수 있다.  
  - 주석은 최대한 많이 작성하는 습관을 들이자. 주석은 컴파일 단계에서 제거되기에 프로그램의 크기와는 상관이 없다.  
  - scanf() 함수를 사용할 때 변수 이름 앞에 (주소를 의미하는) &를 붙여야 한다.  
  - 형식 지정자를 %c로 하면 Enter도 하나의 공백 문자로서 입력 받을 수 있다.  
  ```  
  
---  

# 9. 사용자 정의 함수 (Function)  
- C언어: 모든 언어의 근간  
  - 어셈플리어 취급을 받음.  
    > 어셈블리어: 기계어와 일대일 대응이 되는 컴퓨터 프로그램의 저급 언어  
    - 요즘: 파이썬이나 자바 같은 좀 더 객체지향적인 언어들이 나오면서 c언어보다 좀 더 고급스러운 언어가 나옴  
    - 그렇기 때문에 C언어는 어셈블리어 취급을 받음  
  - 사용자 정의 함수, 배열, 문자열 및 포인터가 주요하게 다루어짐  
    - 이것들을 손 쉽게 구현할 수 있는가: 고급 개발자의 기준  
      - `포인터`: C언어의 특징이자 기본적인 자료 형태  
        
        ```  
        * 포인터
        : 특정한 데이터가 저장되어 있는 메모리의 주소 그 자체를 저장하는 변수  
        : C언어를 고급스럽게 활용하기 위해서는 필수적으로 알아야되는 부분  
        : C언어: 주소에 직접 접근할 수 있음 → 강력한 언어이며 다양한 운영체제(ex. 유닉스) 및 언어들의 기반이 됨  
        ```  

- 사용자 정의 함수   
  : 자기 스스로 만든 함수  
  - 정해진 특정한 기능을 수행하는 모듈  
  - 함수를 적절히 활용하면 하나의 문제를 잘게 분해할 수 있음  
  - ex) 이진 탐색 트리: 삽입, 삭제, 순회 등 다양한 함수의 집합으로 구성  
  
  - (만약 사용자 정의 함수가 없다면) 메인 함수에서 모든 알고리즘을 처리해야 하는데, 이는 작업의 효율성을 저하시킬 것  
  - 함수는 각각의 모듈로서 쉽게 수정하고 보완될 수 있다.  
  

- 시간 더하기 프로그램  
  
  ```  
  #include <stdio.h>

  // 전역 변수  (프로그램 어디서나 접근이 가능한 변수) 
  int hour;
  int minute;
  int minuteAdd;

  void counter(){ /* void: 반환 값이 필요가 없을 때 사용*/
    minute += minuteAdd;
    hour += minute/60;
    minute %= 60;
    hour %= 24;
    /* 전역 변수를 이용하기 때문에 반환 값이 필요가 없네 */
  }

  int main(void){
    printf("시를 입력하세요: ");
    scanf("%d", &hour);
    printf("분을 입력하세요: ");
    scanf("%d", &minute);
    printf("더할 분을 입력하세요: ");
    scanf("%d", &minuteAdd);
    counter(); /* counter를 이런 식으로 집어넣음으로 인해서 main 함수가 굉장히 짧아짐*/
    printf("더해진 시간은 %d시 %d분입니다.\n", hour, minute);
    return 0;
  } 
  ```  
  
  - 전역변수: main함수 바깥에서 선언  
  - 함수의 구조  
  
    ```  
    # ex) 
    void counter(){
    
    }
    ```  
    
    - void: 반환의 형태  
    - counter: 함수의 이름
    - ()내에 매개변수  
    
    - `함수는 이 세 개의 조합으로 이루어진다.`  
    - main 함수의 경우에는 하나의 '약속'처럼 int 값을 반환하도록 (때문에 return 0;) 되어있는데, 사용자 정의 함수는 반환 값에 따라 프로그램의 전반적 내용이 바뀔 수 있다.  
    
- 화폐의 개수를 가장 적게 주는 방법 프로그램  

  ```  
  #include <stdio.h>

  // 특정한 금액을 받아서 가장 적은 거스름 돈 화폐의 개수를 구하는 함수  
  int smallest(int number){
    int count = 0;
    while(number>=50000){
      number -= 50000;
      count++;
    }
    while(number>=10000){
      number -= 10000;
      count++;
    }
    while(number>=5000){
      number -= 5000;
      count++;
    }
    while(number>=1000){
      number -= 1000;
      count++;
    }
    while(number>=500){
      number -= 500;
      count++;
    }
    while(number>=100){
      number -= 100;
      count++;
    }
    while(number>=50){
      number -= 50;
      count++;
    }
    while(number>=10){
      number -= 10;
      count++;
    }

    return count;
  } 


  int main(void){
    int number;
    printf("금액을 입력하세요: ");
    scanf("%d", &number);
    printf("최소로 줄 수 있는 화폐의 개수: %d\n", smallest(number));
  } 
  ```  
  
- 1월 1일부터 현재 날짜까지의 차이 구하기  

  ```  
  #include <stdio.h>

  int getDays(int month, int day)
  {
    int i, sum = 0;
    for(i=1;i < month; i++)
    {
      if(i==2) // 윤년을 감안하지 않겠다. 
      {
        sum += 28;
      }
      else if(i%2==0)
      {
        sum += 30;
      }
      else
      {
        sum += 31;
      }
    }
    return sum + day;
  }

  int main(void){
    int month, day;
    printf("날짜를 입력하세요: "); 
    scanf("%d %d", &month, &day);
    printf("1월 1일부터 해당 날짜까지의 거리는 %d입니다.", getDays(month, day));

    return 0;
  } 
  ```  
   
# 10. 반복함수와 재귀함수  
- 반복함수  
  - 단순히 while 혹은 for 문법을 이용하여 특정한 처리를 반복하는 방식으로 문제를 해결하는 함수  
- 재귀함수  
  - 자신의 함수 내부에서 자기 자신을 스스로 호출함으로써 재귀적으로 문제를 해결하는 함수  
  - 경우에 따라 아주 간결하고 직관적인 코드로 문제를 해결할 수 있게 함  
  - But, 때에 따라서는 심각한 비효율성을 낳을 수도 있음.  
  
- 반복함수를 이용해 숫자 피라미드 출력하기  

  ```  
  #include <stdio.h>

  // 반복함수를 이용해서 숫자 피라미드 출력하기 
  // 반복함수같은 경우는 for문과 while문으로 구성이 됨  
  int print(int a)
  {
    int i,j;
    for (i=0; i<a; i++)
    {
      for(j=0; j<=i; j++)
      {
        printf("%d ", j+1);
      }
      printf("\n");
    }

  } 

  int main(void){
    int a;
    scanf("%d", &a);
    print(a);
    return 0;
  } 
  ```  
  
- 특정한 문자열을 재귀함수를 이용하여 반복 출력하기  
  
  ```  
  #include <stdio.h>

  // 재귀함수 (Recursive Fuction)  
  void print(int count)
  {
    if(count == 0)
    {
      return;	
    }	
    else
    {
      printf("문자열을 출력합니다.\n");
      print(count-1);
    }
  }

  int main(void){
    int number;
    printf("문자열을 몇 개 출력할까요?");
    scanf("%d", &number);
    print(number);
    return 0;
  }
  ```  
  
- 조합구하기  

  ```  
  #include <stdio.h>

  int nCr(int n, int r){
    if (r==0||r==n)
    {
      return 1;
    }
    else
    {
      return nCr(n-1, r-1) + nCr(n-1, r);
    }
  }

  int main(void){
    int n, r;
    scanf("%d %d", &n, &r);
    printf("%d", nCr(n, r));
    return 0;
  }
  ```  
  
    
