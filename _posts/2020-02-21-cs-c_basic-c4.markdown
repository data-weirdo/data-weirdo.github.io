---
layout: post
title:  "C언어 기초4 - (다차원)배열, 포인터 ,문자열"
subtitle:   "C언어-1"
categories: cs
tags: c_basic
comments: true
---

- C언어 상의 배열 및 다차원 배열, 포인터, 그리고 문자열에 대해 정리한 글입니다.  

---  

# 11. 배열  
- 데이터가 __많을 때__ 사용  
  - 배열은 한없이 많을 수 있으면서도, 그 데이터 개수가 `변경될 수 있는` 데이터들의 집합을 지정해줄 수 있기 때문에 효과적으로 대부분의 프로그램에서 사용  
  
- 배열: 다양한 데이터를 삽입할 수 있는 공간    
  - 배열에는 해당 데이터의 순서를 의미하는 인덱스가 존재  
  - 첫번째 데이터를 가리키는 인덱스: 0  
  
  - Example  
  
    |데이터|70|25|12|48|52|
    |-----|--|--|--|--|--|  
    |index|0|1|2|3|4|  
    
    위의 데이터를 array라고 명명한다면,  
    array[0] : 70  
 
- 5개의 정수 중 최대값과 최소값의 위치를 출력  

  ```  
  #include <stdio.h>
  #include <limits.h>
  #define NUMBER 5

  int main(void){
    int i, max, min, index;
    int array[NUMBER]; // 배열을 만들어주는 방법 (크기가 5인 배열 선언)
    // array[0] ~ array[4]: 총 5개가 들어갈 수 있는 크기의 배열 선언  
    max = 0;
    index = 0;

    for(i = 0; i < NUMBER; i++)
    {
      scanf("%d", &array[i]);
      if (max < array[i])
      {
        max = array[i];
        index = i;
      }
    } 
    printf("가장 큰 값은 %d입니다. 그리고 %d번 째에 있습니다.", max, index+1);

    min = INT_MAX;
    for(i = 0; i < NUMBER; i++)
    {
      scanf("%d", &array[i]);
      if (min > array[i])
      {
        min = array[i];
        index = i;
      }
    } 
    printf("가장 작은 값은 %d입니다. 그리고 %d번 째에 있습니다.", min, index+1);

    return 0;
  }
  ```  
  
  - #define NUMBER 5  
    - NUMBER: C언어에서 배열의 크기를 지정해줄 때 많이 사용  
    
- 5개의 정수 중 짝수 최대값과 홀수 최대값을 구하기  

  ```  
  #include <stdio.h>
  #define NUMBER 5

  int main(void)
  {
    int array[NUMBER];
    int i, oddMax, evenMax;
    oddMax = 0;
    evenMax = 0;

    for(i=0 ; i<NUMBER; i++)
    {
      scanf("%d", &array[i]);
      if(array[i] & 2 != 0)
      // 동빈님께서는 짝수 케이스부터 접근을 하셨기에 조금 다릅니다 :) 
      {
        if(oddMax < array[i])
        {
          oddMax = array[i];
        }
      }
      else
      {
        if(evenMax < array[i])
        {
          evenMax = array[i];
        }
      }	
    } 
    printf("홀수 최대값: %d", oddMax);
    printf("짝수 최대값: %d", evenMax);

    return 0;
  }
  ```  
  
# 12. 다차원 배열  
- 다차원 배열은 배열이 배열의 원소로 들어가는 구조를 말함  
- 흔히 이차원 배열은 MxN 형태의 지도를 나타내고자 할 때 많이 사용됨  
- 다차원 배열의 적절한 활용은 현실 세계의 다양한 문제에 보다 쉽게 접근할 수 있도록 함  


- 이차원 배열을 이용해 구구단 출력  
  
  ```  
  #include <stdio.h>

  int main(void){
    int i,j;
    int gugudan[10][10]; // 구구단이란 이름의 이차원 배열을 만듦   
    for (i = 1; i <= 9; i++)
    {
      printf("\n[ %d단 ]\n\n", i);
      for (j = 1; j <= 9; j++)
      {
        gugudan[i][j] = i * j;
        printf("%d x %d = %d\n", i, j, gugudan[i][j]);
      }
    }
    return 0;
  }
  ```  
  
  - 1차원 배열과 2차원 배열  
    ![쿨프로그래밍](http://cfile218.uf.daum.net/image/240F8D3D5270EB961332C6)  
    
    - 2차원 배열의 각 행들은 1차원 배열!!! (배열의 원소로서 하나의 값이 아니라 배열이 들어가 있는 것!)  
    
- 학생 점수의 총합 구하기  
  
  ```  
  #include <stdio.h>

  int main(void){

    int score[5][2]; // 학생 5명, 두 과목 (수학, 영어) 
    int total[2] = { 0, }; // 일차원 배열 할당시 모든 데이터의 값을 0으로  

    int i;

    for(i = 0; i < 5; i ++)
    {
      printf("%d번 학생의 수학, 영어 점수: ", i+1);
      scanf("%d %d", &score[i][0], &score[i][1]);
    }

    for(i = 0; i < 5; i ++)
    {
      total[0] += score[i][0];
      total[1] += score[i][1];
    }

    printf("\n\n5명의 수학 점수 합계: %d", total[0]);
    printf("\n\n5명의 수학 점수 합계: %d", total[1]);
    return 0;
  }
  ```  
  
  - 배열을 잘 사용하면 다양한 프로그램을 잘 작성할 수 있다!  
  
# 13. 포인터 (Pointer)  
: C언어의 무기!?  

- C언어가 갖고 있는 가장 큰 특징이자 장점  
- 포인터: 특정 데이터가 저장된 `메모리의 주소를 저장`하는 변수  
  - 다른 곳의 `주소` 그 자체를 가리키기 때문에 이를 응용하여 다양한 연산을 수행할 수 있음  
  - 뿐만 아니라 프로그램의 어떤 위치에서 사용되더라도 특정한 주소를 그대로 사용하기 때문에 값이 즉시 변경됨.  
  
  - cf) Null Pointer: 가리키는 곳이 없는 포인터  
  
  - ex) int *y = &x;  
    - `*`: 포인터  
    - `&`: 특정 변수의 주소  
    - x의 주소를 포인터 y가 값으로 가지게 된다!  
      - 포인터 y라는 것도 따로 메모리 상의 어떤 위치에 자리를 잡게 되는데,  
        y는 x의 `주소`를 가리키는 하나의 변수가 됨  
       
    - 즉, 다른 변수가 위치한 공간 그 자체에 바로 접근하면서 그 값을 바꾸거나 다른 처리를 할 수 있다는 것이 C언어의 무기!  
    
- 두 변수의 값을 서로 변환하는 프로그램  

  ```  
  #include <stdio.h>

  // 두 변수의 값을 서로 변환하는 포인터 함수  
  void swap(int *x, int *y) // int형의 어떤 값을 가리키는 포인터 x,y를 만들었다.  
  {
    int temp;
    temp = *x; // temp에 포인터 x가 가리키는 위치의 값을 넣어줌.   
    *x = *y;
    *y = temp;
  }

  int main(void){

    int x = 1;
    int y = 2;
    swap(&x, &y);
    printf("x = %d \ny = %d\n", x, y);

    return 0;
  }
  ```  
  - 실제로 두 변수의 값을 변환할 때는 포인터를 이용해서 함수를 만들어야 함.  
    - 포인터를 이용하지 않으면, 매개변수로 넘어온 값들은 해당 함수 내에서만 처리되기 때문  
      (위에 있는 코드의 모든 *들을 없애고 다시 실행하면 값이 바뀌지 않음)   
    - 포인터를 사용하면 프로그램 전역에서 언제 어디서든 값을 바꾸어줄 수 있다.   
    
  ![](http://drive.google.com/uc?export=view&id=1kCMy5IM_wT_o_arkA16kex7fg1KlOD-n)  
  - x = \*y 일 것  
  - &x = y 일 것  

- 포인터 변수의 값을 바꾸어 보는 프로그램  

  ```  
  #include <stdio.h>

  int main(void)
  {
    int i = 10;
    int *p; // 포인터 p 
    p = &i; // p를 i의 주소로 매칭   
    printf("i = %d\n", i);
    *p = 20; // 포인터 p가 가리키는 값을 20으로 바꾸고
    printf("i = %d\n", i);
    return 0;
  } 
  ```  
  
  > 결과  
    i = 10  
    i = 20  


# 14. 문자열 (String)  
- C언어 상에서 다양한 문자 표현을 나타내기 위해 사용  
- 내부적으로, 문자열은 `char` 자료 타입의 `배열`로 이루어져 있음.  
  - 배열은 내부적으로 `포인터`와 `동일한`구조  
  
- ex) `char array[10];`  
  : 10개의 문자를 저장할 수 있는 array가 만들어짐   
  
  - 영어: 한 글자 당 1칸 (`1byte`)  
  - 한글: 한 글자 당 2칸 (`2byte`)   
  
    |a|b|c|d|e|f|g|h|i|j|  
    |-|-|-|-|-|-|-|-|-|-|  
    |0|1|2|3|4|5|6|7|8|9|  
    
    - 영어 10개, 한글 5개가 들어갈 수 있을 것  
    - 예를 들어 a를 가리키는 메모리 주소가 10001이라고 가정  
    - b를 가리키는 메모리 주소 10002 ...  
    - array[1] = b  
    - &array[1] = 10002  
    
      ```  
      요컨대, 배열은 내부적으로 포인터와 아주 유사한 구조를 갖고 있다.  
      ```  
      
- 하나의 문자열 안의 글자수 세기  

  ```  
  #include <stdio.h>

  int main(void)
  {
    char input[1001]; // 총 1001개 만큼의 문자가 들어갈 수 있는 하나의 문자열이 만들어 짐 
    gets(input); // 사용자가 입력하는 문자열이 enter를 칠 때까지 들어간다.  
    int count = 0;
    while(input[count] != '\0') // \0: NULL을 의미 
    {
      count++;
    }
    printf("입력한 문자열의 길이는 %d입니다.\n", count);
    printf("입력한 문자열은 %s입니다.", input); // %s: string의 약자 (하나의 문자열을 의미하는 C언어의 형식 지정자)   
    return 0; 
  }  
  ```  
  
   - C언어 내부에서는 Null값이 보일 때까지 하나의 문자 각각을 출력하는 기법을 사용하고 있다고 할 수 있음.  
  
  
- C언어에서 제공하는 기본 문자열 관련 함수  
  
  ```  
  #include <stdio.h>
  #include <string.h>

  int main(void)
  {
    char input[5] = "LOVE"; // 배열의 선언과 동시에 특정 문자열을 넣을 수 있음   
    printf("문자열의 길이: %d\n", strlen(input));
    return 0;
  } 
  ```  
  
  - string.h: 문자열과 관련한 각종 함수들을 제공해주는 라이브러리  
  - strlen  
  
  ```  
  #include <stdio.h>
  #include <string.h>

  int main(void){
    char inputOne[5] = "A";
    char inputTwo[5] = "B";

    printf("문자열 비교: %d\n", strcmp(inputOne, inputTwo));
    return 0;
  }
  ```  
  
  - `strcmp`: 사전적 순서를 비교하여 값을 출력  
    - 사전적으로 순서가 같다: 0 출력  
    - 왼쪽에 있는 것이 사전적으로 더 빨리 나온다: -1  
    - 오른쪽에 있는 것이 사전적으로 더 빨리 나온다: 1  
    
  ```  
  #include <stdio.h>
  #include <string.h>

  int main(void){
    char input[10] = "I Love You";
    char result[5] = "Love";
    strcpy(result, input); // result라는 문자열 안에 input을 copy할 수 있음  
    printf("문자열 복사: %s\n", result);
    return 0;
  }
  ```  
  
  - result라는 것은 총 5개가 들어갈 수 있는 공간이었음에도 불구하고, I Love You가 할당  
  - `strcpy`: 내부적으로 포인터를 다루는 함수  
  
  
- C언어에서는 `char`라는 기본 변수형을 이용해서 다양하게 문자열을 표현할 수 있다.  
- `string.h` 파일은 다양한 문자열 관련 함수를 제공한다.  

---  

#### Reference  
- 나동빈님 C언어 기초 프로그래밍  

  
      
    
    
