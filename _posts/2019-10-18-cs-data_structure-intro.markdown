---
layout: post
title:  "자료구조에 대한 소개"
subtitle:   "data_structure-intro"
categories: cs
tags: data_structure
comments: true
---

- 자료 구조란 무엇인지, 자료구조는 왜 학습하는지, 그리고 추상자료형(ADT)가 무엇인지에 대해 정리한 글입니다.

---

컴퓨터공학 전공자들이 필수적으로 들어야할 과목 중의 하나가 자료구조라고 합니다. 저는 컴퓨터공학 베이스 전공자가 아니지만, 
필요에 의해 컴퓨터를 공부해야겠다는 필요성을 느끼게 되면서 자료구조에 대해서도 공부해나가기 시작했습니다. 

# 자료 구조란?

자료 구조란 `자료를 논리적·효율적으로 처리할 수 있도록 컴퓨터에 저장하는 방법`이라고 할 수 있겠습니다. 우리는 컴퓨터로
프로그래밍을 하여 현실의 문제를 처리해나가는데, 이 문제들을 가장 효율적으로 처리할 수 있도록 자료의 논리적 구조 자체를
정의해놓는 것 또한 굉장히 중요하다고 할 수 있겠습니다. 

![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=http%3A%2F%2Fcfile24.uf.tistory.com%2Fimage%2F2747733A57E8CD8D061E92)  

여기 수 많은 자료구조들이 있습니다. 여기 등장하는 자료 구조들에 대해 차차 학습해볼 계획입니다. 
단, 모든 문제를 해결해줄 수 있는 'Master Key'와 같은 자료구조는 없으며,
상황에 따라 효율적인 자료구조들이 다릅니다. 현실의 문제에 대해 생각해본 뒤 이를 가장 잘 해결할 수 있는 방향으로
자료의 논리적 구조를 설계하고 컴퓨터를 통해 구현하는 것, 이것이 곧 자료구조 공부의 목적이라고 할 수 있겠습니다. 

# 자료구조는 왜 공부하는 것일까?  

앞서 언급했듯, 자료구조를 공부하는 이유는 문제마다 이를 가장 잘 처리할 수 있게 만드는 데이터의 논리적 구조가 다르기 때문입니다. 

예를 들어 보겠습니다. 어떤 랩실에 10명의 대학원생이 있고 해당 랩실의 교수님은 이 학생들의 학번 마지막 두 자리로 
대학원생 명부를 기록하고 있다고 하겠습니다. 이 학생들의 명부를 어떤 방식으로 정리해놓는 게 좋을까요?

- Case1. 무작위 나열  
예를 들어, (15, 40, 30, 80, 10, 70, 50, 90, 20, 95)의 순서로 학생들을 나열해 기록해놓았다고 가정하겠습니다. 무작위 나열이지요.
학번 끝자리가 30에 해당하는 학생의 정보를 조회하려면 몇 번을 검사해야 할까요? 3번입니다.  그럼 95에 해당하는 학생의 정보를 보려면 몇 번을
검사해야 할까요? 10번입니다. 한 명의 학생 정보를 찾기 위함인데 10번을 읽어야 찾을 수 있습니다.  그런데 만약에 랩실에 한 명의 학생이 더 
들어왔습니다. 이 학생을 명단에 추가하려면 어떻게 하면 될까요? 무작위 나열이기 때문에 맨 마지막에다 그냥 숫자를 적기만 하면 됩니다.
요컨대, 무작위 나열시에는 검색을 위해서는 마지막 항목까지 하나하나 검사해야 하는 `선형탐색(linear search( 알고리즘`을 사용해야 하기 때문에
검색에 대해서는 그닥 좋은 자료구조는 아닙니다. 반면 데이터 관리(삽입)라는 관점에선 좋은 자료구조로 보이는군요.

- Case2. 오름차순 정렬  
대학원생들의 학번을 오름차순 정렬 후 관리한다고 가정해봅시다. 그럼 데이터는 (10, 15, 20, 30, 40, 50, 70, 80, 90, 95)와 같은 순서를
갖게 될 것입니다.  중간에 위치한 항목을 기준으로 검색 범위를 반으로 줄여나가면서 찾고자하는 정보를 검색하는 `이진탐핵(binary search) 알고리즘`을
통해 찾는다면 검색은 빠르겠네요. 20라는 학생을 찾고 싶으면, 40을 기준으로 나누었을 때 20는 40보다 작고, 따라서 다음 검색 범위는 (10, 15, 20, 30)이 
됩니다. 15를 기준으로 나누어 보면 (20, 30)이 택해질 거고 이제 20을 찾을 수 있습니다. 
(cf. 이진탐색 알고리즘은 오름차순이든 내림차순이든 정렬이 되어있단 조건 하에서만 가능합니다.) 
하지만 새로운 번호의 학생이 들어오면 오름차순에 맞추어 배열을 다시 해야하기 때문에, 자리이동을 시켜야 하는 경우가 발생하고, 따라서 관리는
어렵다고 할 수 있습니다. 요컨대 무작위 나열에 비해서 검색은 대체로 빨라지겠지만, 관리라는 측면에서는 비효율적이어 졌네요. 

- Case3. 이 뿐만 아니라 대학원생 데이터들을 이진 탐색 트리(BST: Binary Search Tree)의 형태로 표현할 수도, 다양한 다른 방식들로 나타낼 수도 있겠습니다. (cf. BST는 삽입·삭제가 검색과 똑같은 시간이 걸리는 자료구조라고 합니다.)

이제 자료구조를 공부해야하는 이유가 명확해 졌습니다. 현실세계의 모든 경우에 대해 가장 효율적인 논리적 데이터 구조를 만드는 절대적인
방법이란 것은 존재하지 않기에, 다양한 자료 구조에 대한 학습을 통해 `특정 문제 해결에 적합한 논리적 구조를 선택할 수 있는 능력을 함양`해야 하며
`이 논리적 구조들이 선형 구조인 컴퓨터 메모리에 어떤 식으로 저장될 수 있는지를 인지하고 구현`할 수 있어야 합니다. 이것이 바로 
우리가 자료구조를 학습해야하는 이유라고 할 수 있겠습니다. 

---

위에 등장한 그림에 대해 잠시 설명하자면, 데이터의 논리적 구조는 형태에 따라 크게 두 가지로 나뉩니다.  
선형구조: 데이터 간의 앞뒤 관계가 일대일로 고정되어 있는 구조.  
비선형구조: 데이터 간의 앞뒤 관계가 일대일로 고정되지 않은 구조.  

---

# 추상자료형(ADT)란 무엇인가?

추상자료형이란 `사용자의 입장에서 문제 해결의 대상이 되는 데이터들의 집합과 그 집합에 대한 연산들을 묶어서 정의해 놓은 것`입니다. 
예를 들어, 위의 예에서 저 랩실은 컴퓨터 공학과는 일말의 관계도 없는 랩실이라고 생각해보겠습니다. 그렇다면 교수님은 단지 이 데이터가 
대학원 생들에 대한 정보를 모아놓은 데이터라는 것, 그리고 어떻게 검색하고, 삽입·삭제를 하는지만 아시면 되지 이 데이터들의 
논리적 구조 및 연산을 어떻게 프로그램으로 구현해야하는 지에 대해서는 관심도 없고 알아야 할 필요도 없습니다. 대학원생 데이터가 존재한다는
사실과 이를 관리하는 방법들에 대한 정의를 묶어서 ADT라고 할 수 있습니다. 특정 문제 해결에 대한 ADT의 연산이 가장 효율적으로 수행될 수 있도록 
데이터들에 대한 논리적 구조를 설계하고 구현하는 것, 이것이 바로 `자료구조`의 역할입니다. 
요컨대, `자료구조는 ADT의 구현이다.`라고 정의할 수 있습니다.  

이후 글에는 자료구조의 연산 수행 시간에 대해 분석해보겠습니다. (시간 복잡도)

#### Reference
[자료구조란? 자료구조, 추상 자료형(ADT)](https://boycoding.tistory.com/32)
