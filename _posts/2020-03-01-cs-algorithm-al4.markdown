---
layout: post
title:  "알고리즘4 - 계수 정렬과 정렬 알고리즘 문제 풀이"
subtitle:   "algorithm-4"
categories: cs
tags: algorithm
comments: true
---  

- 계수 정렬과, 정렬 알고리즘 문제 풀이에 대한 글입니다.  

--  

# 12. 계수 정렬(Counting Sort)  
- 계수정렬  
  - `범위 조건`이 있는 경우에 한해 굉장히 빠른 알고리즘 (퀵, 병합, 힙 정렬보다 빠름.)  
  - 속도: `O(N)`
    - 앞에서 차근차근 데이터를 읽어주기만 하면 되기 때문  
  - 단순히 '크기를 기준으로' 세는 알고리즘  
    - 크기를 기준으로 갯수만 세주면 되기 때문에 위치를 바꿀 필요 X (이전의 알고리즘들은 다 위치를 바꾸었음)  

- ex) 다음의 5 이하의 자연수 데이터들을 오름차순 정렬하세요  
  `1 3 2 4 3 2 5 3 1 2 3 4 4 3 5 1 2 3 4 2 3 1 4 3 5 1 2 1 1 1 을 오름차순 정렬하시오`  
  - '5이하'라고 하는 `범위 조건` 존재.  

  - Process  
    1 3 2 4 3 2 5 3 1 2 3 4 4 3 5 1 2 3 4 2 3 1 4 3 5 1 2 1 1 1  
      
    - 초기 상태  
    
      |크기=1|크기=2|크기=3|크기=4|크기=5|  
      |------|------|-----|------|-----|  
      |0|0|0|0|0|  
      
    - 다음  
    
      |크기=1|크기=2|크기=3|크기=4|크기=5|  
      |------|------|-----|------|-----|  
      |1|0|0|0|0|        
      
    - 다음    
    
      |크기=1|크기=2|크기=3|크기=4|크기=5|  
      |------|------|-----|------|-----|  
      |1|0|1|0|0|  
      
      ...  
      
    - 이후, 갯수를 다 세면 다음과 같은 결과가 나오는데  
    
      |크기=1|크기=2|크기=3|크기=4|크기=5|  
      |------|------|-----|------|-----|  
      |8|6|8|4|4|  
      
      - 이 때, 1을 8개, 2를 6개, 3을 8개, ... 와 같은 식으로 출력하면 됨   
      
  - 코드  
  
    ```  
    #include <stdio.h>

    int main(void){
      int temp;
      int count[5];
      int array[30] = {
        1, 3, 2, 4, 3, 2, 5, 3, 1, 2, 
        3, 4, 4, 3, 5, 1, 2, 3, 4, 2, 
        3, 1, 4, 3, 5, 1, 2, 1, 1, 1 
      };

      for(int i=0; i<5; i++){
        count[i] = 0;
      }

      for(int i=0; i<30; i++){
        count[array[i]-1]++;
      }

      for(int i=0; i<5; i++){
        if(count[i]!=0){
          for(int j=0; j<count[i]; j++){
            printf("%d", i+1);
          }
        }
      }

      return 0;
    } 
    ```  
    
   
 # 13. 심화 정렬 알고리즘 문제 풀이  
    
  
