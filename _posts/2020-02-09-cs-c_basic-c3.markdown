---
layout: post
title:  "C언어 기초3 - Hello World, 변수와 상수, 자료형"
subtitle:   "C언어-3"
categories: cs
tags: c_basic
comments: true
---  


---  

# 8. 기본 입출력 (Input Output)  
- 기본 입출력: 사용자와의 상호작용 그 자체  
  - C언어에서는 기본 입출력 함수를 이용하여 사용자와 상호작용할 수 있다.  
  - ex) scanf("%d", &x);: x라는 정수에 사용자가 입력받은 값을 삽입  
      - &: 특정 변수의 메모리 주소를 의미  
    - 다만, 사용자로부터 입력 받을 자료형에 따라 %d, %c, %f, %lf 등의 다양한 문법을 사용해야  
  - ex) printf();: 사용자에게 메시지를 출력할 때 대표적으로 사용 (텍스트 기반의 입출력)  
    - 물론 GUI를 배우면 글자 뿐만 아니라 사용자에게 이미지도 보여줄 수 있음.  
    
  
- To-do List  
  
  ```  
  - 간단한 계산기 프로그램 개발  
  - 정해진 개수의 정수를 더하는 프로그램 개발  
  - 특정한 단의 구구단을 출력하는 프로그램 개발  
  ```  
  
- 간단한 계산기 프로그램 개발  

  ```  
  #include <stdio.h>

  int main(void){
    char o;
    int x, y;
    while(1){
      printf("수식을 입력하세요: ");
      scanf("%d %c %d", &x, &o, &y);
      if(o == '+'){
        printf("%d %c %d = %d\n", x, o, y, x+y);
      }
      else if(o == '-'){
        printf("%d %c %d = %d\n", x, o, y, x-y);
      }
      else if(o == '*'){
        printf("%d %c %d = %d\n", x, o, y, x*y);
      }
      else if(o == '/'){
        printf("%d %c %d = %d\n", x, o, y, x/y);
      }
      else if(o == '%'){
        printf("%d %c %d = %d\n", x, o, y, x%y);
      }
      else{
        printf("입력이 잘못 되었습니다.\n");
      }
      /* getchar(); */
      printf("프로그램을 종료하시겠습니까? (y/n)");
      scanf("%c", &o);
      if(o == 'n' || o == 'N'){
        continue;
      }
      else if(o == 'y' || o == 'Y'){
        break;
      }
      else{
        printf("입력이 잘못 되었습니다.\n");
      }
    }
    return 0;
  }
  ```  
  
  >> 결과  
    - 이 코드를 그대로 실행하면, 이런 결과가 나옴  
      
  
      ```  
      수식을 입력하세요: 3 + 5
      5 + 3 = 8
      프로그램을 종료하시겠습니까? <y/n> 입력이 잘못되었습니다.  ← 아직 입력을 해주지도 않았는데  
      수식을 입력하세요:
      ```  

  - 이것은, C언어에서 버퍼를 처리해주지 않았기 때문  
    - 3 + 5를 입력한 후 `enter`를 쳤는데, 이 또한 문자로 인식해버리기 때문에 이런 결과가 나온 것   
  
  - `getchar()` 이용!! 
    - getchar()를 사용해주면 줄바꿈을 효율적으로 처리할 수 있게 됨  
    - cf) [버퍼와 getchar에 대한 좋은 설명](https://modoocode.com/32)  
  
- 정해진 개수의 정수를 더하는 프로그램 개발  
  
  ```  
  #include <stdio.h>

  int main(void){
    int number, x, i, sum = 0;
    printf("정수의 개수를 입력하세요: ");
    scanf("%d", &number);
    for(i=0; i<number; i++){
      printf("정수의 값을 입력하세요: ");
      scanf("%d", &x);
      sum += x;
    }
    printf("선택 정수의 값은 %d입니다.\n", sum);
    return 0;
  } 
  ```  
  
- 특정한 단의 구구단을 출력하는 프로그램 개발  
  
  ```  
    #include <stdio.h>

  int main(void){
    int x, i;
    printf("정수를 입력하세요:");
    scanf("%d", &x);

    for(i=1;i<=9;i++){
      printf("%d * %d = %d\n", x, i, x*i);
    }
    return 0;
  } 
  ```  
  
- Tip  
  
  ```  
  - 가끔 버퍼가 프로그램의 동작을 방해. C언어에서는 간단하게 getchar() 함수로 버퍼의 공백 문자를 받아낼 수 있다.  
  - 주석은 최대한 많이 작성하는 습관을 들이자. 주석은 컴파일 단계에서 제거되기에 프로그램의 크기와는 상관이 없다.  
  - scanf() 함수를 사용할 때 변수 이름 앞에 (주소를 의미하는) &를 붙여야 한다.  
  - 형식 지정자를 %c로 하면 Enter도 하나의 공백 문자로서 입력 받을 수 있다.  
  ```  
  
---  

# 9. 사용자 정의 함수 (Function)  
- C언어: 모든 언어의 근간  
  - 어셈플리어 취급을 받음.  
    > 어셈블리어: 기계어와 일대일 대응이 되는 컴퓨터 프로그램의 저급 언어  
    - 요즘: 파이썬이나 자바 같은 좀 더 객체지향적인 언어들이 나오면서 c언어보다 좀 더 고급스러운 언어가 나옴  
    - 그렇기 때문에 C언어는 어셈블리어 취급을 받음  
  - 사용자 정의 함수, 배열, 문자열 및 포인터가 주요하게 다루어짐  
    - 이것들을 손 쉽게 구현할 수 있는가: 고급 개발자의 기준  
      - `포인터`: C언어의 특징이자 기본적인 자료 형태  
        
        ```  
        * 포인터
        : 특정한 데이터가 저장되어 있는 메모리의 주소 그 자체를 저장하는 변수  
        : C언어를 고급스럽게 활용하기 위해서는 필수적으로 알아야되는 부분  
        : C언어: 주소에 직접 접근할 수 있음 → 강력한 언어이며 다양한 운영체제(ex. 유닉스) 및 언어들의 기반이 됨  
        ```  

- 사용자 정의 함수   
  : 자기 스스로 만든 함수  
  - 정해진 특정한 기능을 수행하는 모듈  
  - 함수를 적절히 활용하면 하나의 문제를 잘게 분해할 수 있음  
  - ex) 이진 탐색 트리: 삽입, 삭제, 순회 등 다양한 함수의 집합으로 구성  
  
  - (만약 사용자 정의 함수가 없다면) 메인 함수에서 모든 알고리즘을 처리해야 하는데, 이는 작업의 효율성을 저하시킬 것  
  - 함수는 각각의 모듈로서 쉽게 수정하고 보완될 수 있다.  
  

- 시간 더하기 프로그램  
  
  ```  
  
  ```  
  
  - 전역변수: main함수 바깥에서 선언  
  - 함수의 구조  
  
    ```  
    # ex) 
    int counter(){
    
    }
    ```  
    
    - int: 반환의 형태  
    - counter: 함수의 이름
    - ()내에 매개변수  
    
    - `함수는 이 세 개의 조합으로 이루어진다.`  
    
    
