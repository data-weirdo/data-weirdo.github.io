---
layout: post
title:  "C언어 기초6 - 동적 메모리와 그 활용"
subtitle:   "C언어-6"
categories: cs
tags: c_basic
comments: true
---

- C언어 상의 동적 메모리와 그 활용에 대한 글입니다.  

---  

# 19. 동적 메모리  

- 동적 메모리  
  : 메모리의 유연한 관리 (Dynamic Memory Allocation)  

  
- 동적 메모리의 할당  
  - 프로그램이 실행 도중에 동적으로 메모리를 할당 받는 것  
  - 프로그램에서는 필요한 만큼의 메모리를 시스템으로부터 할당받아서 사용, 사용이 끝나면 시스템에 메모리 반납  
  - 필요한 만큼 할당 받고, 필요할 때에 사용하고 반납 → 메모리의 효율적 활용  
  
  > 동적 메모리의 사용이 끝나면 반드시 해당 메모리 영역을 명시적으로 반납해주어야 함.  
    - free(); 함수 사용.  
  
  - `malloc()` 계열의 라이브러리 함수를 사용  
  
  
- 동적 메모리 기초 예제  
  
  ```  
  #include <stdio.h>
  #include <stdlib.h>

  int main(void)
  {
    int *pi; // Point Integer의 약자  
    pi = (int *)malloc(sizeof(int)); // malloc: 메모리 할당   
    if(pi == NULL)
    {
      printf("동적 메모리 할당에 실패하였습니다.\n");	
      exit(1); // 지금 실행하고 있는 프로그램 자체를 종료  
    } 
    *pi = 100;
    printf("%d\n", *pi);
    // 동적 메모리를 사용한 이후에는 무조건 해당 메모리를 반환! 
    free(pi);

    return 0;
  }
  ```  
  
  > 100이라는 숫자가 출력 됨  
  
  - `stdlib.h` : 동적 메모리의 사용을 위해서 필수적으로 넣어주어야 하는 라이브러리  
  - `malloc()`: 메모리를 할당해라!  
    - 괄호 안: 할당할 크기  
  - `(int *)`로 형 변환을 해줌으로써 pi라는 변수가 해당 위치를 기억할 수 있도록 해줌  
  - `free`: 메모리 할당 해제  
  
- 다시 정리  
  
  ```  
  int *pi; // Line 1
  pi = (int *)malloc(sizeof(int)); // Line 2
  ```  
  
  - Line1: 포인터 변수 pi (주소를 기억)  
  - Line2:  
    - malloc(sizeof(int)) → RAM 상에서 4byte 만큼의 할당이 이루어짐  
      - (int *): `형변환`  
        : (int *) 오른쪽의 것을 (int *)의 형태로 자료형을 바꾸어 준다.  
      - pi로 하여금 할당해준 위치를 기억하도록  
      
- 동적 메모리를 활용해 100 Byte를 입력받아 알파벳 출력하기  

  ```  
  #include <stdio.h>
  #include <stdlib.h>

  int main(void)
  {
    char *pc = NULL;
    int i = 0;
    pc = (char *)malloc(100 * sizeof(char)); // 1개의 문자가 들어갈 수 있는 공간 x 100 

    if (pc==NULL){
      printf("동적 메모리 할당에 실패했습니다.\n");
      exit(1);
    }

    // *pc가 가리키는 포인터를 1씩 증가시키며 알파벳 소문자를 삽입.  

    for (i = 0; i < 26; i++ )
    {
      *(pc + i) = 'a' + i;
    }

    *(pc + i) = 0; // 아스키코드 0에 해당하는 문자를 넣어줌 (NULL을 의미)   
    // Z 다음에는 NULL 값이 들어가게 될 것.  
    printf("%s\n", pc);  
    free(pc); // 동적메모리 할당 해제  
    return 0; 
  }
  ```  
  
  ![](http://drive.google.com/uc?export=view&id=1y3iYisPbJuqIeKWpB7LWpLkL8DrruD-8)  
        
        
- 동적 메모리로 정수 5개 처리해보기  

  ```  
  #include <stdio.h>
  #include <stdlib.h>

  int main(void){
    int *pi, i; 
    pi = (int *)malloc(5*sizeof(int));
    if(pi == NULL)
    {
      printf("동적 메모리 할당에 실패했습니다.\n");
      exit(1);	
    }
    pi[0] = 100;
    pi[1] = 200;
    pi[2] = 300;
    pi[3] = 400;
    pi[4] = 500;

    for(i = 0; i < 5; i++)
    {
      printf("%d\n", *(pi+i));
    }
    free(pi);

    return 0;
  }
  ```  
  
  - cf) pi[0] = *(pi+0)  
  
# 20. 동적 메모리의 활용  
- 동적 메모리 할당 기술: C언어에서 고급 프로그램 개발이 이루어질 때 빠질 수 없는 부분.  
  - ex) ptr = malloc(1024)를 입력해주면, 총 1024 byte에 해당하는 영역이 메모리에서 할당이 이루어짐 & ptr이 그곳을 가리키게 됨  
  
- 동적 메모리를 활용해 구조체 다루기  

  ```  
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>

  struct Book
  {
    int number;
    char title[100];
  };

  void showBook(struct Book *p, int n) // n: Book의 개수  
  {
    int i;
    for (i=0; i<n; i++)
    {
      printf("번호 %d: %s\n", (p+i)->number, (p+i)->title);	
    }
  }

  int main(void)
  {
    struct Book *p;
    p = (struct Book *)malloc(2 * sizeof(struct Book));
    if(p == NULL)
    {
      printf("동적 메모리 할당에 실패했습니다. \n");
      exit(1);
    }
    // 지금까지 구조체에서 특정 속성에 접근 하기 위해 .을 찍어줬다면, 
    // 포인터 같은 경우는 -> 를 통해 해당 변수에 접근 가능 
    p->number = 1;
    strcpy(p->title, "C Programming"); 

    (p+1)->number=2;
    strcpy((p+1)->title, "Data Structure"); 

    showBook(p, 2);
    free(p);

    return 0;
  } 
  ```  
  
  > 결과  
    번호 1: C Programming  
    번호 2: Data Structure  
 
  - `p-> number = 1;`  
    : p라는 구조체의 number라는 변수에 1을 넣어줌.  
    
- 동적 메모리를 이용해 2차원 배열 다루어보기  

  ```  
  #include <stdio.h>
  #include <string.h>
  #include <stdlib.h>

  int main(void)
  {
    int i, x, y;
    int** pptr = (int**)malloc(sizeof(int*) * 8);
    for(i=0; i<8; i++)
    {
      *(pptr + i) = (int *)malloc(sizeof(int) * 6);
    }

    for(y = 0; y < 8; y++)
    {
      for(x=0; x < 6; x++)
      {
        *(*(pptr + y) + x) = 6 * y + x;
      }
    }

    for(y = 0; y<8; y++)
    {
      for(x=0; x<6; x++)
      {
        printf("%3d", *(*(pptr+y)+x));
      }	
      printf("\n");
    }

    for(y=0; y<8; y++)
    {
      free(*(pptr+y));
    }

    return 0;	
  } 
  ```  
  
  ![](http://drive.google.com/uc?export=view&id=1GFmzOkdnN9X850x9G8bsg8xD4MNI76eX)  
  
  > 결과  
  
  ![](http://drive.google.com/uc?export=view&id=1D7liNEWH7glSWaHcD0GtHslcZAubsYiU)  
  
  
  - `int** pptr = (int **)malloc(sizeof(int) * 8);`  
    - 포인터 변수를 8개 만들어준다고 생각하면 됨  
      - 하나하나의 포인터 변수는 어떠한 배열을 가리키는 포인터 변수가 된 것  
      
      
#### Reference  
- 나동빈님 C언어 기초 프로그래밍  
